#======================================
# file name:lsit_insert_func.py
# author:liangliangSu
# date of writing:2022-09-12 14:30
# description:
#======================================
#!/usr/bin/env python3
#Python3 List insert()方法
#描述
#insert() 函数用于将指定对象插入列表的指定位置。
#语法
#insert()方法语法：
#list.insert(index, obj)
#参数
#index -- 对象obj需要插入的索引位置。
#obj -- 要插入列表中的对象。
#返回值
#该方法没有返回值，但会在列表指定位置插入对象。
#实例
#以下实例展示了 insert()函数的使用方法：
#实例
#!/usr/bin/python3
list1 = ['Google', 'Runoob', 'Taobao']
list1.insert(1, 'Baidu')
print ('列表插入元素后为 : ', list1)
#以上实例输出结果如下：
#列表插入元素后为 :  ['Google', 'Baidu', 'Runoob', 'Taobao']
#对于层叠列表，使用 insert 和 append 函数有一个非常特别之处，就是如果增加的是列表中的一个元素（子列表），则新增的元素初始只作为原元素的一个镜像，这时候如果修改原元素（子列表）中的一个子元素，则新增元素同样变化，修改新元素中的子元素也是如此。如：
#a=[[0,1],[1,2],[2,3]]
#a.insert(2,a[1])
#a.append(a[3])
#print (a)
#a[1][1]=0
#a[4][1]=4
#print(a)
#则输出为：
#[[0,1],[1,2],[1,2],[2,3],[2,3]]
#[[0,1],[1,0],[1,0],[2,4],[2,4]]
#如果想只修改其中一个元素（子列表），必须把该子列表完整定义一遍，如在上述代码后增加。
#a[1]=[1,1]
#print(a)
#则输出为：
#[[0,1],[1,1],[1,0],[2,4],[2,4]]
#此后再修改子元素，不会发生联动：
#a[1][1]=5
#print(a)
#输出为：
#[[0,1],[1,5],[1,0],[2,4],[2,4]]
#补充楼上：
#a.insert(2,a[1])   #对象是[1,2]
#a.append(a[3])     #对象是[2,3]
#此时 a=[[0, 1], [1, 2], [1, 2], [2, 3], [2, 3]]
#用 id() 函数查看内存地址：
#id(a[1])==id(a[2])      #True
#id(a[3])==id(a[4])       #True
#所以
#a[1][1]=0
#a[4][1]=4
#本质上改变的是对象 [1,2],[2,3]
#此时 a=[[0, 1], [1, 0], [1, 0], [2, 4], [2, 4]]
#用 id() 函数再次查看内存地址
#id(a[1])==id(a[2])      #True
#id(a[3])==id(a[4])       #True
#楼上的 a[1]=[1,1] 此时是增加了一个对象 [1,1], 此时 a= [[0, 1], [1, 1], [1, 0], [2, 4], [2, 4]]
#用 id() 函数再次查看内存地址
#id(a[1])==id(a[2])     #False
